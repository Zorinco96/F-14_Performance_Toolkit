import streamlit as st
import math
import io
from reportlab.pdfgen import canvas
from PIL import Image, ImageDraw, ImageFont

# -----------------------------
# Constants and Aircraft Data
# -----------------------------
g = 9.80665
ft2m = 0.3048
lb2kg = 0.45359237
kt2ms = 0.514444
mps2kt = 1/kt2ms
m2ft = 3.28084

WING_AREA_M2 = 52.5
CLmax_by_flap = {0:1.2, 10:1.4, 20:1.7, 30:2.0, 40:2.1}
brake_decel_g = 0.35
rotation_time = 2.0
empty_weight_lbs = 40000

# -----------------------------
# Helper Functions
# -----------------------------
def air_density(alt_ft, oat_c):
    alt_m = alt_ft * ft2m
    T0 = 288.15
    L = 0.0065
    P0 = 101325
    R = 287.05
    T_std = T0 - L * alt_m
    T = oat_c + 273.15
    P = P0 * (T0 / T_std) ** (g / (R * L)) * (T / T_std) ** (g / (R * L))
    rho = P / (R * T)
    if rho <= 0:
        rho = 1.225 * math.exp(-alt_m / 8000)
    return rho

def v_stall(weight_kg, rho, S, CLmax):
    W = weight_kg * g
    return math.sqrt(2*W / (rho * S * CLmax))

def accelerate_stop_distance(V1):
    a_brake = brake_decel_g * g
    return (V1**2) / (2 * a_brake) + 150

def accelerate_go_distance(Vr, V2):
    return Vr*rotation_time + V2*2.5

def adjust_for_wind(Vs, wind_kt):
    return max(0, Vs - 0.5*wind_kt)

def adjust_distance_for_slope(dist_ft, slope_percent):
    return dist_ft * (1 + slope_percent/100)

def carrier_takeoff(Vr, trim, carrier_mode):
    if carrier_mode:
        Vr -= 40
        trim += 2
    return Vr, trim

def recommend_thrust(weight_lbs, flap_deg, runway_length_ft):
    if runway_length_ft < 5000:
        return "Afterburner"
    elif weight_lbs > 65000 or flap_deg < 20:
        return "Military"
    else:
        return "Minimum Required"

def runway_safety_color(runway_length_ft, balanced_field_ft):
    margin = runway_length_ft - balanced_field_ft
    if margin > 500:
        return "green"
    elif margin > 0:
        return "yellow"
    else:
        return "red"

def find_takeoff_speeds(weight_lbs, oat_c, alt_ft, flap_deg, thrust_mode, wind_kt=0, slope_percent=0, carrier_mode=False):
    weight_kg = weight_lbs * lb2kg
    rho = air_density(alt_ft, oat_c)
    CLmax = CLmax_by_flap.get(flap_deg, 1.7)

    Vs = v_stall(weight_kg, rho, WING_AREA_M2, CLmax)
    Vs = adjust_for_wind(Vs, wind_kt)
    Vr = Vs*1.05
    V2 = Vs*1.20
    V1 = Vs*1.04

    Vr, trim = carrier_takeoff(Vr, 8.0 + (weight_lbs-50000)/10000.0, carrier_mode)

    stop_dist_m = accelerate_stop_distance(V1)
    go_dist_m = accelerate_go_distance(Vr, V2)
    balanced_field_m = max(stop_dist_m, go_dist_m)

    stop_dist_ft = adjust_distance_for_slope(stop_dist_m*m2ft, slope_percent)
    go_dist_ft = adjust_distance_for_slope(go_dist_m*m2ft, slope_percent)
    balanced_field_ft = adjust_distance_for_slope(balanced_field_m*m2ft, slope_percent)

    trim = max(5.0, min(12.0, trim))
    rpm_target = {"Afterburner":102, "Military":96, "Minimum Required":92}[thrust_mode]

    return {
        "Vs (kt)": round(Vs*mps2kt,1),
        "V1 (kt)": round(V1*mps2kt,1),
        "Vr (kt)": round(Vr*mps2kt,1),
        "V2 (kt)": round(V2*mps2kt,1),
        "Balanced Field Length (ft)": round(balanced_field_ft),
        "Accel-Go Distance (ft)": round(go_dist_ft),
        "Accel-Stop Distance (ft)": round(stop_dist_ft),
        "Takeoff Trim (° NU)": round(trim,1),
        "Target Engine RPM (%)": rpm_target,
        "Thrust Mode": thrust_mode
    }

# -----------------------------
# PDF & Print-Ready PNG Generation
# -----------------------------
def draw_kneeboard(c, results, weight, temp, alt, flaps, width, height):
    c.setFont("Helvetica-Bold", 20)
    c.drawCentredString(width/2, height-50, "F-14B TAKEOFF CARD")
    c.setFont("Helvetica", 12)
    c.rect(20, height-120, width-40, 60)
    c.drawString(30, height-100, f"GW: {weight} lbs")
    c.drawString(180, height-100, f"OAT: {temp} °C")
    c.drawString(300, height-100, f"Elev: {alt} ft")
    c.drawString(420, height-100, f"Flaps: {flaps}°")
    c.drawString(30, height-115, f"Thrust: {results['Thrust Mode']}")
    y = height-160
    c.setFont("Helvetica-Bold", 16)
    c.drawString(30, y, f"Vs: {results['Vs (kt)']} kt")
    c.drawString(150, y, f"V1: {results['V1 (kt)']} kt")
    c.drawString(270, y, f"Vr: {results['Vr (kt)']} kt")
    c.drawString(390, y, f"V2: {results['V2 (kt)']} kt")
    y = height-230
    c.rect(20, y, width-40, 60)
    c.setFont("Helvetica-Bold", 14)
    c.drawString(30, y+40, f"Balanced Field: {results['Balanced Field Length (ft)']} ft")
    c.drawString(30, y+20, f"Accel-Go: {results['Accel-Go Distance (ft)']} ft")
    c.drawString(280, y+20, f"Accel-Stop: {results['Accel-Stop Distance (ft)']} ft")
    y = height-310
    c.rect(20, y, width-40, 50)
    c.setFont("Helvetica-Bold", 16)
    c.drawString(30, y+25, f"Trim: {results['Takeoff Trim (° NU)']}° NU")
    c.drawString(280, y+25, f"Target RPM: {results['Target Engine RPM (%)']}%")
    c.setFont("Helvetica-Oblique", 10)
    c.drawCentredString(width/2, 20, "Generated by F-14B Takeoff Calculator (DCS)")

def generate_pdf(results, weight, temp, alt, flaps):
    buffer = io.BytesIO()
    width, height = 512, 768
    c = canvas.Canvas(buffer, pagesize=(width, height))
    draw_kneeboard(c, results, weight, temp, alt, flaps, width, height)
    c.showPage()
    c.save()
    buffer.seek(0)
    return buffer

def generate_png_image(results, weight, temp, alt, flaps, template="Day"):
    scale = 2
    width, height = 512*scale, 768*scale
    colors = {"Day":("white","black"), "Night":("#111111","#FFFFFF"), "High Contrast":("#FFFF00","#000000")}
    bg_color, font_color = colors.get(template, ("white","black"))

    img = Image.new("RGB", (width, height), bg_color)
    draw = ImageDraw.Draw(img)
    try:
        font_bold = ImageFont.truetype("arialbd.ttf", 40*scale)
        font_normal = ImageFont.truetype("arial.ttf", 28*scale)
    except:
        font_bold = ImageFont.load_default()
        font_normal = ImageFont.load_default()

    # Margins and positions optimized for print-ready kneeboard
    margin = 20*scale
    draw.text((width//2, 40*scale), "F-14B TAKEOFF CARD", font=font_bold, fill=font_color, anchor="mm")
    draw.rectangle([margin, 80*scale, width-margin, 140*scale], outline=font_color, width=3)
    draw.text((margin+10, 90*scale), f"GW: {weight} lbs", font=font_normal, fill=font_color)
    draw.text((180*scale, 90*scale), f"OAT: {temp} °C", font=font_normal, fill=font_color)
    draw.text((300*scale, 90*scale), f"Elev: {alt} ft", font=font_normal, fill=font_color)
    draw.text((420*scale, 90*scale), f"Flaps: {flaps}°", font=font_normal, fill=font_color)
    draw.text((margin+10, 115*scale), f"Thrust: {results['Thrust Mode']}", font=font_normal, fill=font_color)

    y = 160*scale
    draw.text((30*scale, y), f"Vs: {results['Vs (kt)']} kt", font=font_bold, fill=font_color)
    draw.text((150*scale, y), f"V1: {results['V1 (kt)']} kt", font=font_bold, fill=font_color)
    draw.text((270*scale, y), f"Vr: {results['Vr (kt)']} kt", font=font_bold, fill=font_color)
    draw.text((390*scale, y), f"V2: {results['V2 (kt)']} kt", font=font_bold, fill=font_color)

    y = 230*scale
    draw.rectangle([margin, y, width-margin, y+60*scale], outline=font_color, width=3)
    draw.text((30*scale, y+10*scale), f"Balanced Field: {results['Balanced Field Length (ft)']} ft", font=font_bold, fill=font_color)
    draw.text((30*scale, y+35*scale), f"Accel-Go: {results['Accel-Go Distance (ft)']} ft", font=font_bold, fill=font_color)
    draw.text((280*scale, y+35*scale), f"Accel-Stop: {results['Accel-Stop Distance (ft)']} ft", font=font_bold, fill=font_color)

    y = 310*scale
    draw.rectangle([margin, y, width-margin, y+50*scale], outline=font_color, width=3)
    draw.text((30*scale, y+10*scale), f"Trim: {results['Takeoff Trim (° NU)']}° NU", font=font_bold, fill=font_color)
    draw.text((280*scale, y+10*scale), f"Target RPM: {results['Target Engine RPM (%)']}%", font=font_bold, fill=font_color)

    draw.text((width//2, height-40*scale), "Generated by F-14B Takeoff Calculator (DCS)", font=font_normal, fill=font_color, anchor="mm")

    img = img.resize((512,768), resample=Image.LANCZOS)
    buffer = io.BytesIO()
    img.save(buffer, format="PNG")
    buffer.seek(0)
    return buffer

# -----------------------------
# Streamlit UI
# -----------------------------
st.set_page_config(layout="centered")
st.title("F-14B Takeoff Calculator (DCS)")

# Weight/Balance Inputs
fuel_lbs = st.number_input("Fuel Load (lbs)", 0, 15000, 5000)
ordnance_lbs = st.number_input("Ordnance Load (lbs)", 0, 10000, 2000)
weight = empty_weight_lbs + fuel_lbs + ordnance_lbs

# Takeoff Conditions
temp = st.number_input("OAT (°C)", -30, 50, 15)
alt = st.number_input("Field Elevation (ft)", 0, 8000, 0)
flaps = st.selectbox("Flap Setting", [0,10,20,30,40], index=2)
thrust_mode = st.selectbox("Thrust Rating", ["Afterburner", "Military", "Minimum Required"], index=1)
wind_kt = st.number_input("Headwind (+) / Tailwind (-) (kt)", -30, 30, 0)
slope_percent = st.number_input("Runway Slope (%)", -5, 5, 0)
carrier_mode = st.checkbox("Carrier Ops Mode (Catapult)", value=False)
template = st.selectbox("Kneeboard Template", ["Day","Night","High Contrast"])
runway_length_ft = st.number_input("Runway Length (ft)", 3000, 12000, 8000)

auto_thrust = recommend_thrust(weight, flaps, runway_length_ft)
st.info(f"Auto Thrust Recommendation: {auto_thrust}")

if st.button("Calculate"):
    res = find_takeoff_speeds(weight, temp, alt, flaps, thrust_mode, wind_kt, slope_percent, carrier_mode)
    st.subheader("Results")
    for k,v in res.items():
        st.write(f"**{k}:** {v}")

    # Runway safety warning
    color = runway_safety_color(runway_length_ft, res["Balanced Field Length (ft)"])
    st.markdown(f"**Runway Safety:** <span style='color:{color}'>{color.upper()}</span>", unsafe_allow_html=True)

    # History
    if "history" not in st.session_state:
        st.session_state.history = []
    st.session_state.history.insert(0, res)
    st.session_state.history = st.session_state.history[:5]
    st.subheader("Previous Takeoff Cards")
    for i, h in enumerate(st.session_state.history):
        st.write(f"{i+1}. GW: {weight} lbs, Flaps: {flaps}°, Thrust: {h['Thrust Mode']}")

    # PDF Export
    pdf_bytes = generate_pdf(res, weight, temp, alt, flaps)
    st.download_button(
        "📄 Print Takeoff Card (PDF)",
        data=pdf_bytes,
        file_name="F14_Takeoff_Card.pdf",
        mime="application/pdf"
    )

    # PNG Export & Preview
    png_bytes = generate_png_image(res, weight, temp, alt, flaps, template)
    st.image(png_bytes, caption="Print-Ready Kneeboard Preview", use_column_width=True)
    st.download_button(
        "🖼️ Export Takeoff Card (PNG)",
        data=png_bytes,
        file_name="F14_Takeoff_Card.png",
        mime="image/png"
    )

