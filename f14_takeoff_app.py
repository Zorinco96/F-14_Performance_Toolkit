import streamlit as st
import math
from reportlab.pdfgen import canvas
from reportlab.lib.pagesizes import letter
from reportlab.lib.utils import ImageReader
import io
from PIL import Image

# ---- Constants ----
g = 9.80665
ft2m = 0.3048
lb2kg = 0.45359237
kt2ms = 0.514444
mps2kt = 1/kt2ms
m2ft = 3.28084
rho_sl = 1.225

# Heatblur F-14 approximations
WING_AREA_M2 = 52.5
MAX_THRUST_LBF_PER_ENGINE = 34154
TOTAL_MAX_THRUST_N = MAX_THRUST_LBF_PER_ENGINE * 2 * 4.44822

# Aerodynamics
CLmax_by_flap = {0:1.2, 10:1.4, 20:1.7, 30:2.0, 40:2.1}
brake_decel_g = 0.35
rotation_time = 2.0

# ---- Helper functions ----
def air_density(alt_ft, oat_c):
    alt_m = alt_ft * ft2m
    T0 = 288.15
    L = 0.0065
    P0 = 101325
    R = 287.05
    T_std = T0 - L * alt_m
    T = oat_c + 273.15
    P = P0 * (T0 / T_std) ** (g / (R * L)) * (T / T_std) ** (g / (R * L))
    rho = P / (R * T)
    if rho <= 0:
        rho = rho_sl * math.exp(-alt_m / 8000.0)
    return rho

def v_stall(weight_kg, rho, S, CLmax):
    W = weight_kg * g
    return math.sqrt(2*W / (rho * S * CLmax))

def accelerate_stop_distance(V1, mass):
    a_brake = brake_decel_g * g
    return (V1**2) / (2 * a_brake) + 150  # extra roll margin

def accelerate_go_distance(Vr, V2):
    return Vr*rotation_time + V2*2.5  # simple airborne fudge

def find_takeoff_speeds(weight_lbs, oat_c, alt_ft, flap_deg, thrust_mode):
    weight_kg = weight_lbs * lb2kg
    rho = air_density(alt_ft, oat_c)
    CLmax = CLmax_by_flap.get(flap_deg, 1.7)

    # Stall-based speeds
    Vs = v_stall(weight_kg, rho, WING_AREA_M2, CLmax)
    Vr = Vs*1.05
    V2 = Vs*1.20
    V1 = Vs*1.04

    # Distances
    stop_dist_m = accelerate_stop_distance(V1, weight_kg)
    go_dist_m = accelerate_go_distance(Vr, V2)
    balanced_field_m = max(stop_dist_m, go_dist_m)

    # Trim approximation
    trim = 8.0 + (weight_lbs - 50000) / 10000.0
    trim = max(5.0, min(12.0, trim))

    # Thrust mode & target RPM
    if thrust_mode == "Afterburner":
        rpm_target = 102
    elif thrust_mode == "Military":
        rpm_target = 96
    else:  # Minimum Required
        rpm_target = 92

    return {
        "Vs (kt)": round(Vs*mps2kt,1),
        "V1 (kt)": round(V1*mps2kt,1),
        "Vr (kt)": round(Vr*mps2kt,1),
        "V2 (kt)": round(V2*mps2kt,1),
        "Balanced Field Length (ft)": round(balanced_field_m*m2ft),
        "Accel-Go Distance (ft)": round(go_dist_m*m2ft),
        "Accel-Stop Distance (ft)": round(stop_dist_m*m2ft),
        "Takeoff Trim (° NU)": round(trim,1),
        "Target Engine RPM (%)": rpm_target,
        "Thrust Mode": thrust_mode
    }

# ---- PDF & PNG Generation ----
def draw_kneeboard(c, results, weight, temp, alt, flaps, width, height):
    # Title
    c.setFont("Helvetica-Bold", 20)
    c.drawCentredString(width/2, height - 50, "F-14B TAKEOFF CARD")

    # Conditions box
    c.setFont("Helvetica", 12)
    c.rect(20, height-120, width-40, 60)
    c.drawString(30, height-100, f"GW: {weight} lbs")
    c.drawString(180, height-100, f"OAT: {temp} °C")
    c.drawString(300, height-100, f"Elev: {alt} ft")
    c.drawString(420, height-100, f"Flaps: {flaps}°")
    c.drawString(30, height-115, f"Thrust: {results['Thrust Mode']}")

    # V-speeds row
    c.setFont("Helvetica-Bold", 16)
    y = height-160
    c.drawString(30, y, f"Vs: {results['Vs (kt)']} kt")
    c.drawString(150, y, f"V1: {results['V1 (kt)']} kt")
    c.drawString(270, y, f"Vr: {results['Vr (kt)']} kt")
    c.drawString(390, y, f"V2: {results['V2 (kt)']} kt")

    # Distances box
    y = height-230
    c.rect(20, y, width-40, 60)
    c.setFont("Helvetica-Bold", 14)
    c.drawString(30, y+40, f"Balanced Field: {results['Balanced Field Length (ft)']} ft")
    c.drawString(30, y+20, f"Accel-Go: {results['Accel-Go Distance (ft)']} ft")
    c.drawString(280, y+20, f"Accel-Stop: {results['Accel-Stop Distance (ft)']} ft")

    # Trim + RPM
    y = height-310
    c.rect(20, y, width-40, 50)
    c.setFont("Helvetica-Bold", 16)
    c.drawString(30, y+25, f"Trim: {results['Takeoff Trim (° NU)']}° NU")
    c.drawString(280, y+25, f"Target RPM: {results['Target Engine RPM (%)']}%")

    # Footer
    c.setFont("Helvetica-Oblique", 10)
    c.drawCentredString(width/2, 20, "Generated by F-14B Takeoff Calculator (DCS)")

# PDF
def generate_pdf(results, weight, temp, alt, flaps):
    buffer = io.BytesIO()
    width, height = 512, 768
    c = canvas.Canvas(buffer, pagesize=(width, height))
    draw_kneeboard(c, results, weight, temp, alt, flaps, width, height)
    c.showPage()
    c.save()
    buffer.seek(0)
    return buffer

# PNG
def generate_png(results, weight, temp, alt, flaps):
    buffer = io.BytesIO()
    width, height = 512, 768
    c = canvas.Canvas(buffer, pagesize=(width, height))
    draw_kneeboard(c, results, weight, temp, alt, flaps, width, height)
    c.showPage()
    c.save()
    buffer.seek(0)

    # Convert PDF to PNG
    pdf_image = Image.open(buffer)
    png_buffer = io.BytesIO()
    pdf_image.save(png_buffer, format="PNG")
    png_buffer.seek(0)
    return png_buffer

# ---- Streamlit UI ----
st.title("F-14B Takeoff Calculator (DCS)")

weight = st.number_input("Gross Weight (lbs)", 40000, 74000, 60000, 500)
temp = st.number_input("OAT (°C)", -30, 50, 15, 1)
alt = st.number_input("Field Elevation (ft)", 0, 8000, 0, 100)
flaps = st.selectbox("Flap Setting", [0,10,20,30,40], index=2)
thrust_mode = st.selectbox("Thrust Rating", ["Afterburner", "Military", "Minimum Required"], index=1)

if st.button("Calculate"):
    res = find_takeoff_speeds(weight, temp, alt, flaps, thrust_mode)
    st.subheader("Results")
    for k,v in res.items():
        st.write(f"**{k}:** {v}")

    # PDF Export
    pdf_bytes = generate_pdf(res, weight, temp, alt, flaps)
    st.download_button(
        "📄 Print Takeoff Card (PDF)",
        data=pdf_bytes,
        file_name="F14_Takeoff_Card.pdf",
        mime="application/pdf"
    )

    # PNG Export
    png_bytes = generate_png(res, weight, temp, alt, flaps)
    st.download_button(
        "🖼️ Export Takeoff Card (PNG)",
        data=png_bytes,
        file_name="F14_Takeoff_Card.png",
        mime="image/png"
    )
